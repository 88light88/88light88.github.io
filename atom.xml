<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://88light88.github.io</id>
    <title>88light88</title>
    <updated>2020-06-25T10:02:13.300Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://88light88.github.io"/>
    <link rel="self" href="https://88light88.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://88light88.github.io/images/avatar.png</logo>
    <icon>https://88light88.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 88light88</rights>
    <entry>
        <title type="html"><![CDATA[JavaScript 中的 逻辑运算符]]></title>
        <id>https://88light88.github.io/post/javascript-zhong-de-and-he-or/</id>
        <link href="https://88light88.github.io/post/javascript-zhong-de-and-he-or/">
        </link>
        <updated>2020-06-24T15:33:42.000Z</updated>
        <content type="html"><![CDATA[<p>今天在阅读Underscore.js源代码时看到这以下这样一段代码：</p>
<pre><code class="language-js">var root = typeof self == 'object' &amp;&amp; self.self === self &amp;&amp; self ||
            typeof global == 'object' &amp;&amp; global.global === global &amp;&amp; global ||
            Function('return this')() ||
            {};
</code></pre>
<p>在之前的基础学习和使用中或在一般的经典编程语言中（JAVA，C等），逻辑表达式最终会返回来一个布尔值。在看上面的这段代码，发现它最终会返回一个对象给root变量而不是布尔值。这是怎么回事呢？通过在google查询资料才明白该使用的区别，下面就来记录一下。</p>
<h3 id="逻辑运算符概念">逻辑运算符概念：</h3>
<p>在javascript中有三个逻辑运算符：&amp;&amp;（与）、||（或）、!（非）。虽然他们被称为逻辑运算符，但这些运算符却可以被应用于任意类型的值（在传统编程中逻辑运算符只能被引用于布尔值），而不仅仅是布尔值，他们的返回结果也可以是任意类型的值。</p>
<h3 id="与">&amp;&amp;（与）</h3>
<p>当两个操作值(true、false)或条件表达式都是真值，就返回true，否则返回false。如下所示：</p>
<pre><code class="language-js">result = true &amp;&amp; true ; //  true
result = false &amp;&amp; true ; //  false
result = true &amp;&amp; false ; //  false
result = false &amp;&amp; false ; //  false
</code></pre>
<p>以上是传统的使用方式，在javascripit中逻辑运算符两侧不一定为条件表达式或布尔值，&amp;&amp;两侧可以是任意的操作数，字符串，数值，对象等这样都是可以的，如下所示（<strong>与操作寻找第一个假值</strong>）：</p>
<pre><code class="language-js">result = value1 &amp;&amp; value2 &amp;&amp; value3;
</code></pre>
<p>以上的示例都做了以下的事情：</p>
<ul>
<li>从左到右依次计算操作数</li>
<li>将每一个操作数都转换为布尔值，如果结果为false就停止计算，并返回这个操作数的初始值。</li>
<li>如果所有的操作数都计算过（也就是，所有操作数都为true），则返回最后一个操作数。<br>
换句话说，如果运算到假值就返回，否则所有操作数都没有假值就返回最后一个真值。<br>
示例：</li>
</ul>
<pre><code class="language-js">    //如果运算到假值，就返回
    result = 0 &amp;&amp; 1 ; // 0
    //如果所有值都为真，返回最后一个操作数
    result = 1 &amp;&amp; 2 ; // 2
    //如果运算到假值，就返回
    result = null &amp;&amp; 5 ; //null
     //如果运算到假值，就返回
    result = 0 &amp;&amp; &quot;test&quot; ; // 0
    //如果运算到假值，就返回
    result = 1 &amp;&amp; 2 &amp;&amp; null &amp;&amp; 3  ; // null
    //如果所有值都为真，返回最后一个操作数
    result = 1 &amp;&amp; 2 &amp;&amp; 3 ; // 3
</code></pre>
<h4 id="与运算比或运算的优先级要高所以会在或运算之前执行例如-a-b-c-d-完全跟-表达式加了括号一样a-b-c-d">与运算（&amp;&amp;）比或运算（||）的优先级要高，所以会在或运算之前执行，例如 a &amp;&amp; b || c &amp;&amp; d 完全跟 &amp;&amp; 表达式加了括号一样：(a &amp;&amp; b) || (c &amp;&amp; d)。</h4>
<h3 id="或">||（或）</h3>
<p>在传统编程中，逻辑或只能够操作布尔值。如果参与运算的的任意一个操作值为true，返回的结果就为true，否则就为false。如下所示：</p>
<pre><code class="language-js">//基本使用方式
result = true || true ; //  true
result = false || true ; //  true
result = true || false ; //  true
result = false || false ; //  false
</code></pre>
<p>从以上的代码演示可以看出，只有在所有的条件都为false的时候结果才为false，否则只要存在一个true，结果都是true。<br>
以上是对或运算符基本的使用，在Javascript中还有其他的特性。如下所示（<strong>或运算寻找第一个真值</strong>）：</p>
<pre><code class="language-js">result = value1 || value2 || value3;
</code></pre>
<p>以上的||的示例都做了如下的事情：</p>
<ul>
<li>从左到右依次计算操作数</li>
<li>处理每一个操作数时都将其转换为布尔值，如果结果时true，就停止计算并返回这个操作数的初始值。</li>
<li>如果所有的操作数都被计算过（也就是，转换的结果都为false），则返回最后一个操作数。<br>
示例：</li>
</ul>
<pre><code class="language-js">alert( 1 || 0 ); // 1（1 是真值）
alert( true || 'no matter what' ); //（true 是真值）
alert( null || 1 ); // 1（1 是第一个真值）
alert( null || 0 || 1 ); // 1（第一个真值）
alert( undefined || null || 0 ); // 0（所有的转化结果都是 false，返回最后一个值）
</code></pre>
<p>以上说的时&amp;&amp; 和 || 的传统使用方式以及javascript中的附加特性，学习完之后就可以对文章最开始的代码在进行解读：</p>
<pre><code class="language-js">var root = typeof self == 'object' &amp;&amp; self.self === self &amp;&amp; self ||
            typeof global == 'object' &amp;&amp; global.global === global &amp;&amp; global ||
            Function('return this')() ||
            {};
</code></pre>
<ul>
<li>首先 typeof self == 'object' &amp;&amp; self.self === self &amp;&amp; self 判断的是或去当前代码是否运行在窗口环境中也就是浏览器中。这里使用的就是逻辑与的javascript特性。如果当前程序运行在浏览器环境，也就会有self对象。也就是说这段代码会<strong>寻找第一个假值</strong>，如果没有假值返回最后的self。</li>
<li>其他后面的条件都是类似的。</li>
<li>对所有的与做完运算之后，再次使用进行或运算<strong>寻找第一个真值</strong>，如果存在真值则立即返回，否则返回最后一个值，在上面的代码中也就是返回一个空的对象{}。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Babel官方文档学习笔记]]></title>
        <id>https://88light88.github.io/post/babel-guan-fang-wen-dang-xue-xi-bi-ji/</id>
        <link href="https://88light88.github.io/post/babel-guan-fang-wen-dang-xue-xi-bi-ji/">
        </link>
        <updated>2020-06-22T08:56:22.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="1-babel是什么">1、Babel是什么？</h3>
<p>Babel是一个javascript的编译器，能够将ES6及以上新ES标准的代码转换为向后兼容的javascript语法。以便能够在当前版本与旧版本的浏览器中运行。</p>
<h3 id="2-使用babel转换es6高级语法">2、使用Babel转换ES6+高级语法</h3>
]]></summary>
        <content type="html"><![CDATA[<h3 id="1-babel是什么">1、Babel是什么？</h3>
<p>Babel是一个javascript的编译器，能够将ES6及以上新ES标准的代码转换为向后兼容的javascript语法。以便能够在当前版本与旧版本的浏览器中运行。</p>
<h3 id="2-使用babel转换es6高级语法">2、使用Babel转换ES6+高级语法</h3>
<!-- more -->
<p>官方文档的实例：</p>
<pre><code class="language-js">// (1) Babel 输入： ES2015 箭头函数
[1, 2, 3].map((n) =&gt; n + 1); 

// (2) Babel 输出： ES5 语法实现的同等功能
[1, 2, 3].map(function(n) {
  return n + 1;
});
</code></pre>
<p>以上 (1) 使用的是ES6中的箭头函数，在一些旧版本的浏览器（例如IE8等其他产品）中是不能使用的，所以我们需要使用babel对箭头函数进行转化。</p>
<p>简单了解了babel之后想要实现此转换功能必须先对环境进行配置：</p>
<p>2.1 新建一个空的文件夹然后使用npm初始化项目</p>
<pre><code>npm init -y
</code></pre>
<p>2.2 使用npm安装babel以及babel的其他所需包</p>
<pre><code>npm install --save-dev @babel/core @babel/cli @babel/preset-env
npm install --save @babel/polyfill
</code></pre>
<p>2.3 编写babel.config.json配置文件</p>
<pre><code class="language-json">{
  &quot;presets&quot;: [
    [
      &quot;@babel/env&quot;,
      {
        &quot;targets&quot;: {
          &quot;edge&quot;: &quot;17&quot;,
          &quot;firefox&quot;: &quot;60&quot;,
          &quot;chrome&quot;: &quot;67&quot;,
          &quot;safari&quot;: &quot;11.1&quot;,
        },
        &quot;useBuiltIns&quot;: &quot;usage&quot;,
      }
    ]
  ]
}
</code></pre>
<p>2.4 转换ES6代码</p>
<pre><code>npx babel src -d dist
</code></pre>
<p>以上在控制台中使用npx命令执行babel，并且指定了需要转换的文件的路径（src目录下的所有的文件），以及转换完成之后输出的地方（dist），命令中的 -d 是 --out-dir 的缩写表示将转换的文件输出到什么位置。</p>
<p>2.5 查看转换后的代码</p>
<pre><code class="language-js">&quot;use strict&quot;;

// (1) Babel 输入： ES2015 箭头函数
[1, 2, 3].map(n =&gt; n + 1);
</code></pre>
<p>以上的被babel转换后的输出，可以发现并没有被转换。这是因为在转换会默认读取babel.config.json配置文件，在配置文件中的 targets 的配置设置了需要支持浏览器的版本，以上设置的这些浏览器都已经支持了箭头函数所以并不会进行转换。现在将配置文件中的代码替换为一下的内容再次运行转换：</p>
<pre><code class="language-json">{
    &quot;presets&quot;: [
      [
        &quot;@babel/env&quot;,
        {
          &quot;targets&quot;: {
            &quot;ie&quot;: &quot;8&quot;,
            &quot;edge&quot;: &quot;17&quot;,
            &quot;firefox&quot;: &quot;60&quot;,
            &quot;chrome&quot;: &quot;67&quot;,
            &quot;safari&quot;: &quot;11.1&quot;
          },
          &quot;useBuiltIns&quot;: &quot;usage&quot;
        }
      ]
    ]
  }
</code></pre>
<p>执行转换指令npx babel src -d dist 后的结果已经对箭头函数转换成功（图右侧为转换成功）：<br>
<img src="https://88light88.github.io/post-images/1592816392097.png" alt="" loading="lazy"></p>
<h3 id="3-插件与预设">3、插件与预设</h3>
<p>3.1 插件<br>
插件是小型的javascript程序，代码的转换都是由它来做的，我们自己也可以编写自己的插件来实现特定的转换功能。但是一个插件只能实现某个特定转换功能，ES6+ 新语法很多，可以将一个个插件添加到配置中去但是这样干就会很麻烦，所以babel也就提供了预设这个概念。<br>
3.2 预设<br>
预设其实就是一堆插件的组合，我们可以根据自己的需要组合创建自己的预设，babel也提供和好几种插件提供给我们使用：</p>
<pre><code>    @babel/preset-env
    @babel/preset-flow
    @babel/preset-react
    @babel/preset-typescript
</code></pre>
<p>这样就可以在json配置中根据自己项目的需要使用babel提供的presets。</p>
<h3 id="4-polyfill">4、Polyfill</h3>
<p>Babel 只是转换 syntax 层语法,所有需要 @babel/polyfill 来处理API兼容,又因为 polyfill 体积太大，所以通过 preset的 useBuiltIns 来实现按需加载,再接着为了满足 npm 组件开发的需要 出现了 @babel/runtime 来做隔离。<br>
4.1、在index.js文件中写入一下的代码：</p>
<pre><code class="language-js">let array = [1, 2, 3, 4, 5, 6];
array.includes(item =&gt; item &gt; 2);
new Promise()
</code></pre>
<p>4.2、使用babel进行转换<br>
<img src="https://88light88.github.io/post-images/1592835778393.png" alt="" loading="lazy"><br>
可以看到上图的结果，Babel默认只转换箭头函数、let，Promise 和 includes 都没有转换 。这是为什么，Babel 把 Javascript 语法 分为 syntax 和 api，先说 api , api 指那些我们可以通过 函数重新覆盖的语法 ，类似 includes,map,includes,Promise,凡是我们能想到重写的都可以归属到 api。啥子是 syntax ,像 箭头函数，let,const,class, 依赖注入 Decorators,等等这些，我们在 Javascript 在运行是无法重写的。那 Babel 只负责 转换 syntax , includes,map,includes 这些 API 层面的 怎么办, Babel 把这个放在了 单独放在了 polyfill 这个模块处理。<br>
4.3、使用@babel/polyfill<br>
首先安装polyfill支持</p>
<pre><code>npm i @babel/polyfill -S 
</code></pre>
<p>接下来在babel.config.json中进行配置useBuiltIns属性：<br>
第一：false（默认值）<br>
该属性的值的意思就是不使用@babel/polyfill的特性，也就是说只要关于api层面的转换啥玩意也不干。</p>
<p>babel.config.json</p>
<pre><code class="language-json">{
    &quot;presets&quot;: [
      [
        &quot;@babel/preset-env&quot;,
        {
          &quot;useBuiltIns&quot;: &quot;false&quot;,
          &quot;debug&quot;: true
        }
      ]
    ]
  }
</code></pre>
<pre><code class="language-js">import '@babel/polyfill'
let array = [1, 2, 3, 4, 5, 6];
array.includes(item =&gt; item &gt; 2);
new Promise()
</code></pre>
<p>编写完以上代码使用 npx babel src -d dist 指令编译之后控制台会报错，因为我们显式的配置了false，是不能使用@babel/polyfill特性的所以会报错。而如果不显式配置useBuiltIns则在转换时什么也不干。<br>
第二：entry<br>
设置为entry表示把全部的api层面的特性全部引入。<br>
<img src="https://88light88.github.io/post-images/1592837044459.png" alt="" loading="lazy"><br>
一般情况下不要将此属性配置为entry，它会把所有的实现全部都导入进来，这会导致我们的文件非常大。<br>
第三：usage<br>
此方式是按需导入。<br>
<img src="https://88light88.github.io/post-images/1592837181751.png" alt="" loading="lazy"><br>
可以看到这次我们即可已转换syntax层面的代码，也按需转换了api层面的代码。<br>
4.4、使用babel/runtime<br>
安装所需的project</p>
<pre><code>npm install --save-dev @babel/plugin-transform-runtime
npm install --save @babel/runtime
</code></pre>
<p>现在可以按需导入之特性了但是以上方式会导致一个问题，就是全局污染。我们使用runtime就是为了解决全局污染问题。<br>
babel.config.json配置如下：</p>
<pre><code class="language-json">{
    &quot;presets&quot;: [
      [
        &quot;@babel/preset-env&quot;,
        {
          &quot;useBuiltIns&quot;: &quot;usage&quot;,
          &quot;debug&quot;: true
        }
      ]
    ],
    &quot;plugins&quot;:[
        [
            &quot;@babel/plugin-transform-runtime&quot;,
            {
                &quot;corejs&quot;: 3
              }
        ]
    ]
  }
</code></pre>
<p>注意：corejs默认为false，corejs: 2表示只支持全局变量(例如 Promise)和静态属性(例如 arry.from) ，而 corejs: 3也支持实例属性(例如[].includes)。</p>
<p>执行编译指令得到下图结果：<br>
<img src="https://88light88.github.io/post-images/1592838864894.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Github Blog]]></title>
        <id>https://88light88.github.io/post/hello-github-blog/</id>
        <link href="https://88light88.github.io/post/hello-github-blog/">
        </link>
        <updated>2020-06-17T08:32:14.000Z</updated>
        <content type="html"><![CDATA[<p>This is my first github blog<br>
<img src="https://88light88.github.io/post-images/1592382811234.jpeg" alt="有趣" loading="lazy"></p>
]]></content>
    </entry>
</feed>